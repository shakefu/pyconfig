---
description: Version control and commit message guidelines
globs:
alwaysApply: false
---

# Version Control Guidelines

## Commit Message Standards

- This project uses pre-commit hooks - ensure they pass before committing
- **Always use Conventional Commits for all commit messages** following the specification at <https://www.conventionalcommits.org/en/v1.0.0/>
- Use the format: `<type>(scope): <description>` - **scope is required**
- The scope should reflect the portion of the package that was modified, for example if your package is `pytool`:
  - If modifying the package root, `pytool/__init__.py` then the scope is `pytool`, or the package name.
  - If modifying `pytool/lang.py`, use scope `lang`
  - If modifying `pytool/utils/helpers.py`, use scope `utils`
  - If modifying multiple modules, use the most relevant or common scope

## Commit Types

- Common types: `feat:`, `fix:`, `docs:`, `style:`, `refactor:`, `test:`, `chore:`
- Use `!` or `BREAKING CHANGE:` footer for breaking changes
- Keep commits focused and atomic

## Commit Organization

- **Group changes into small logical commits** - instead of making one large commit with multiple bullet points in the message, break changes into separate commits where each commit represents a single logical change or feature addition/fix

## Examples

- `feat(cli): add new CLI command for file processing`
- `fix(parser): handle empty input files correctly`
- `docs(readme): update README with installation instructions`

## Best Practices

- Keep commits focused and atomic
- Write clear, descriptive commit messages
- Reference issues when applicable
- Use present tense in commit messages
